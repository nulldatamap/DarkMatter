ASTObject.functioncall{ pos: (2, 1) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (2, 7) , value: Hello World!\n , } , ] , }
ASTObject.structdec{ name: predef , }
ASTObject.constdef{ vtype: ASTObject.deftype{ isarray: False , typename: predef , ispointer: False , arraysize: 0 , } , name: VAR , value: ASTObject.literal{ cast: uint , vtype: int , pos: (6, 20) , value: 4919 , } , }
ASTObject.constdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: OTHER , value: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (7, 32) , value: 911 , } , pos: (7, 32) , op: + , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (7, 25) , value: 9001 , } , pos: (7, 25) , op: * , left: ASTObject.literal{ cast: uint , vtype: int , pos: (6, 20) , value: 40030 , } , } , } , }
ASTObject.typedef{ vtype: ASTObject.deftype{ isarray: False , typename: char , ispointer: True , arraysize: 0 , } , name: string , }
ASTObject.typedef{ vtype: ASTObject.deftype{ isarray: False , typename: string , ispointer: True , arraysize: 0 , } , name: strings , }
ASTObject.structdef{ fields: {'self': <IceLeaf.ast.ASTObject object at 0x0000000002324C50>, 'health': <IceLeaf.ast.ASTObject object at 0x0000000002324C18>, 'name': <IceLeaf.ast.ASTObject object at 0x0000000002324C88>} , name: Player , }
ASTObject.op{ right: ASTObject.arrayliteral{ index: ASTObject.literal{ cast: int , vtype: int , pos: (19, 17) , value: 1 , } , values: [ ASTObject.literal{ cast: int , vtype: int , pos: (19, 17) , value: 1 , } , ] , pos: (19, 16) , } , pos: (19, 16) , op: = , left: ASTObject.vardec{ varname: array , vtype: ASTObject.deftype{ isarray: True , typename: int , ispointer: True , arraysize: 0 , } , pos: (19, 8) , } , }
ASTObject.op{ right: ASTObject.structcontruct{ fields: {'health': <IceLeaf.ast.ASTObject object at 0x0000000002324EF0>, 'name': <IceLeaf.ast.ASTObject object at 0x0000000002324F98>} , struct: Player , pos: (21, 18) , } , pos: (21, 10) , op: = , left: ASTObject.var{ name: player , pos: (21, 1) , } , }
ASTObject.functiondef{ returntype: ASTObject.deftype{ isarray: False , typename: char , ispointer: False , arraysize: 0 , } , body: ASTObject.codeblock{ code: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (25, 10) , value: 1 , } , pos: (25, 10) , op: + , left: ASTObject.literal{ cast: int , vtype: int , pos: (25, 6) , value: 3 , } , } , pos: (25, 6) , op: + , left: ASTObject.literal{ cast: int , vtype: int , pos: (25, 2) , value: 2 , } , } , ] , } , arguments: [ ] , name: top , }
ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (28, 13) , value: 100 , } , pos: (28, 13) , op: = , left: ASTObject.vardec{ varname: beers , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , pos: (28, 5) , } , }
ASTObject.whileloop{ body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ pos: (31, 5) , name: print , arguments: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: string , vtype: string , pos: (31, 24) , value:  on the wall.\n , } , pos: (31, 24) , op: + , left: ASTObject.var{ name: beers , pos: (31, 16) , } , } , pos: (31, 16) , op: + , left: ASTObject.literal{ cast: string , vtype: string , pos: (31, 11) , value:  , } , } , ] , } , ASTObject.functioncall{ pos: (32, 5) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (32, 11) , value: You take 1 down, you pass it around and you've got  , } , ] , } , ASTObject.op{ var: ASTObject.var{ name: beers , pos: (33, 5) , } , pos: (34, 1) , op: x-- , } , ] , } , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (29, 15) , value: 0 , } , pos: (29, 15) , op: > , left: ASTObject.var{ name: beers , pos: (29, 7) , } , } , }
ASTObject.functioncall{ pos: (35, 1) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (35, 7) , value: no more beer on the wall! , } , ] , }
ASTObject.functiondef{ returntype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , body: ASTObject.codeblock{ code: [ ASTObject.returnstatement{ value: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (40, 26) , value: 1 , } , pos: (40, 26) , op: << , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (40, 20) , value: 27 , } , pos: (40, 20) , op: + , left: ASTObject.var{ name: myInt , pos: (40, 12) , } , } , } , } , ] , } , arguments: [ ASTObject.argdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: myInt , } , ] , name: giveMeAnInt , }
ASTObject.functioncall{ pos: (42, 1) , name: print , arguments: [ ASTObject.op{ right: ASTObject.functioncall{ pos: (42, 22) , name: giveMeAnInt , arguments: [ ASTObject.literal{ cast: int , vtype: int , pos: (42, 34) , value: 3 , } , ] , } , pos: (42, 22) , op: + , left: ASTObject.literal{ cast: string , vtype: string , pos: (42, 7) , value: My int is  , } , } , ] , }
ASTObject.functioncall{ pos: (43, 1) , name: print , arguments: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: string , vtype: string , pos: (43, 20) , value:  on the wall.\n , } , pos: (43, 20) , op: + , left: ASTObject.var{ name: beers , pos: (43, 12) , } , } , pos: (43, 12) , op: + , left: ASTObject.literal{ cast: string , vtype: string , pos: (43, 7) , value:  , } , } , ] , }
ASTObject.functioncall{ pos: (44, 1) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (44, 7) , value: You take 1 down, you pass it around and you've got  , } , ] , }
ASTObject.op{ var: ASTObject.var{ name: beers , pos: (45, 1) , } , pos: (46, 1) , op: x-- , }
ASTObject.op{ right: ASTObject.op{ var: ASTObject.var{ name: jorge , pos: (46, 8) , } , pos: (46, 8) , op: @ , } , pos: (46, 7) , op: = , left: ASTObject.var{ name: bob , pos: (46, 1) , } , }
ASTObject.ifstatement{ elsebody: ASTObject.ifstatement{ elsebody: ASTObject.codeblock{ code: [ ASTObject.functioncall{ pos: (55, 2) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (55, 8) , value: This will be printed , } , ] , } , ] , } , condition: ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (50, 31) , value: 3 , } , pos: (50, 31) , op: + , left: ASTObject.var{ name: y , pos: (50, 27) , } , } , pos: (50, 27) , op: >= , left: ASTObject.var{ name: x , pos: (50, 22) , } , } , pos: (50, 22) , op: || , left: ASTObject.op{ right: ASTObject.var{ name: p , pos: (50, 17) , } , pos: (50, 17) , op: != , left: ASTObject.var{ name: n , pos: (50, 12) , } , } , } , iftrue: ASTObject.codeblock{ code: [ ASTObject.var{ name: print , pos: (52, 2) , } , ASTObject.literal{ cast: string , vtype: string , pos: (52, 8) , value: I have no idea about this one , } , ] , } , } , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (47, 7) , value: 1 , } , pos: (47, 7) , op: == , left: ASTObject.literal{ cast: int , vtype: int , pos: (47, 4) , value: 0 , } , } , iftrue: ASTObject.codeblock{ code: [ ASTObject.functioncall{ pos: (49, 2) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (49, 9) , value: Hello world! , } , ] , } , ] , } , }
ASTObject.forloop{ body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ pos: (59, 2) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (59, 8) , value: meh , } , ] , } , ] , } , step: ASTObject.op{ var: ASTObject.var{ name: i , pos: (57, 25) , } , pos: (57, 29) , op: x++ , } , init: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (57, 14) , value: 0 , } , pos: (57, 14) , op: = , left: ASTObject.vardec{ varname: i , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , pos: (57, 10) , } , } , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (57, 21) , value: 10 , } , pos: (57, 21) , op: < , left: ASTObject.var{ name: i , pos: (57, 17) , } , } , }
ASTObject.forloop{ body: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (61, 37) , value: 3 , } , pos: (61, 37) , op: * , left: ASTObject.var{ name: i , pos: (61, 35) , } , } , pos: (61, 35) , op: = , left: ASTObject.var{ name: n , pos: (61, 31) , } , } , step: ASTObject.op{ var: ASTObject.var{ name: i , pos: (61, 25) , } , pos: (61, 29) , op: x++ , } , init: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (61, 14) , value: 0 , } , pos: (61, 14) , op: = , left: ASTObject.vardec{ varname: i , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , pos: (61, 10) , } , } , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (61, 21) , value: 10 , } , pos: (61, 21) , op: < , left: ASTObject.var{ name: i , pos: (61, 17) , } , } , }
ASTObject.whileloop{ body: ASTObject.op{ var: ASTObject.var{ name: i , pos: (62, 12) , } , pos: (62, 15) , op: x++ , } , condition: ASTObject.literal{ cast: bool , vtype: int , pos: (62, 7) , value: 1 , } , }
ASTObject.dowhileloop{ body: ASTObject.op{ var: ASTObject.var{ name: i , pos: (63, 4) , } , pos: (63, 8) , op: x++ , } , condition: ASTObject.literal{ cast: bool , vtype: int , pos: (63, 14) , value: 1 , } , }
ASTObject.repeatloop{ body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ pos: (66, 2) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (66, 9) , value: I'm repeating myself! , } , ] , } , ASTObject.breakstatement{ } , ] , } , amount: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (64, 10) , value: 10 , } , pos: (64, 10) , op: * , left: ASTObject.var{ name: n , pos: (64, 8) , } , } , withvar: ASTObject.vardec{ varname: i , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , pos: (64, 22) , } , }
ASTObject.switchstatement{ defaultcase: 4 , body: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.var{ name: b , pos: (72, 11) , } , pos: (72, 11) , op: + , left: ASTObject.var{ name: a , pos: (72, 7) , } , } , pos: (72, 7) , op: = , left: ASTObject.var{ name: c , pos: (72, 3) , } , } , ASTObject.breakstatement{ } , ASTObject.op{ right: ASTObject.op{ right: ASTObject.var{ name: b , pos: (75, 11) , } , pos: (75, 11) , op: * , left: ASTObject.var{ name: a , pos: (75, 7) , } , } , pos: (75, 7) , op: = , left: ASTObject.var{ name: c , pos: (75, 3) , } , } , ASTObject.breakstatement{ } , ASTObject.functioncall{ pos: (78, 3) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (78, 9) , value: ERROR , } , ] , } , ] , cases: [ ASTObject.case{ lineindex: 0 , testvalue: ASTObject.literal{ cast: uint , vtype: int , pos: (71, 7) , value: 1 , } , } , ASTObject.case{ lineindex: 2 , testvalue: ASTObject.literal{ cast: uint , vtype: int , pos: (74, 7) , value: 2 , } , } , ] , value: ASTObject.var{ name: x , pos: (69, 10) , } , }
ASTObject.op{ var: ASTObject.vardec{ varname: lel , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: True , arraysize: 0 , } , pos: (80, 8) , } , pos: (80, 3) , op: addr , }
ASTObject.functiondec{ returntype: ASTObject.deftype{ isarray: False , typename: void , ispointer: False , arraysize: 0 , } , arguments: [ ASTObject.argdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: v , } , ] , name: function , }
ASTObject.functiondef{ returntype: ASTObject.deftype{ isarray: False , typename: void , ispointer: False , arraysize: 0 , } , body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ pos: (86, 2) , name: print , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (86, 9) , value: I'm the definition! , } , ] , } , ] , } , arguments: [ ASTObject.argdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: v , } , ] , name: function , }
