ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: Hello World!\n , } , ] , name: print , }
ASTObject.structdec{ name: predef , }
ASTObject.constdef{ vtype: ASTObject.deftype{ isarray: False , typename: predef , ispointer: False , arraysize: 0 , } , name: var , value: ASTObject.structcontruct{ fields: {} , struct: predef , } , }
ASTObject.typedef{ vtype: ASTObject.deftype{ isarray: False , typename: char , ispointer: True , arraysize: 0 , } , name: string , }
ASTObject.typedef{ vtype: ASTObject.deftype{ isarray: False , typename: string , ispointer: True , arraysize: 0 , } , name: strings , }
ASTObject.structdef{ fields: {'self': <IceLeaf.ast.ASTObject object at 0x00000000023624A8>, 'health': <IceLeaf.ast.ASTObject object at 0x0000000002362470>, 'name': <IceLeaf.ast.ASTObject object at 0x00000000023624E0>} , name: Player , }
ASTObject.op{ right: ASTObject.arrayliteral{ index: ASTObject.literal{ vtype: int , value: 1 , } , values: [ ASTObject.literal{ vtype: int , value: 1 , } , ] , } , op: = , left: ASTObject.vardec{ varname: array , vtype: ASTObject.deftype{ isarray: True , typename: int , ispointer: True , arraysize: 0 , } , } , }
ASTObject.op{ right: ASTObject.structcontruct{ fields: {'health': <IceLeaf.ast.ASTObject object at 0x0000000002362748>, 'name': <IceLeaf.ast.ASTObject object at 0x00000000023627F0>} , struct: Player , } , op: = , left: ASTObject.var{ name: player , } , }
ASTObject.functiondef{ returntype: ASTObject.deftype{ isarray: False , typename: char , ispointer: False , arraysize: 0 , } , body: ASTObject.codeblock{ code: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 1 , } , op: + , left: ASTObject.literal{ vtype: int , value: 3 , } , } , op: + , left: ASTObject.literal{ vtype: int , value: 2 , } , } , ] , } , arguments: [ ] , name: top , }
ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 100 , } , op: = , left: ASTObject.vardec{ varname: beers , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , } , }
ASTObject.whileloop{ body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ arguments: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ vtype: string , value:  on the wall.\n , } , op: + , left: ASTObject.var{ name: beers , } , } , op: + , left: ASTObject.literal{ vtype: string , value:  , } , } , ] , name: print , } , ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: You take 1 down, you pass it around and you've got  , } , ] , name: print , } , ASTObject.op{ var: ASTObject.var{ name: beers , } , op: x-- , } , ] , } , condition: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 0 , } , op: > , left: ASTObject.var{ name: beers , } , } , }
ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: no more beer on the wall! , } , ] , name: print , }
ASTObject.functiondef{ returntype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , body: ASTObject.codeblock{ code: [ ASTObject.returnstatement{ value: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 1 , } , op: << , left: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 27 , } , op: + , left: ASTObject.var{ name: myInt , } , } , } , } , ] , } , arguments: [ ASTObject.argdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: myInt , } , ] , name: giveMeAnInt , }
ASTObject.functioncall{ arguments: [ ASTObject.op{ right: ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: int , value: 3 , } , ] , name: giveMeAnInt , } , op: + , left: ASTObject.literal{ vtype: string , value: My int is  , } , } , ] , name: print , }
ASTObject.functioncall{ arguments: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ vtype: string , value:  on the wall.\n , } , op: + , left: ASTObject.var{ name: beers , } , } , op: + , left: ASTObject.literal{ vtype: string , value:  , } , } , ] , name: print , }
ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: You take 1 down, you pass it around and you've got  , } , ] , name: print , }
ASTObject.op{ var: ASTObject.var{ name: beers , } , op: x-- , }
ASTObject.op{ right: ASTObject.op{ var: ASTObject.var{ name: jorge , } , op: @ , } , op: = , left: ASTObject.var{ name: bob , } , }
ASTObject.ifstatement{ elsebody: ASTObject.ifstatement{ elsebody: ASTObject.codeblock{ code: [ ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: This will be printed , } , ] , name: print , } , ] , } , condition: ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 3 , } , op: + , left: ASTObject.var{ name: y , } , } , op: >= , left: ASTObject.var{ name: x , } , } , op: || , left: ASTObject.op{ right: ASTObject.var{ name: p , } , op: != , left: ASTObject.var{ name: n , } , } , } , iftrue: ASTObject.codeblock{ code: [ ASTObject.var{ name: print , } , ASTObject.literal{ vtype: string , value: I have no idea about this one , } , ] , } , } , condition: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 1 , } , op: == , left: ASTObject.literal{ vtype: int , value: 0 , } , } , iftrue: ASTObject.codeblock{ code: [ ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: Hello world! , } , ] , name: print , } , ] , } , }
ASTObject.forloop{ body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: meh , } , ] , name: print , } , ] , } , step: ASTObject.op{ var: ASTObject.var{ name: i , } , op: x++ , } , init: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 0 , } , op: = , left: ASTObject.vardec{ varname: i , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , } , } , condition: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 10 , } , op: < , left: ASTObject.var{ name: i , } , } , }
ASTObject.forloop{ body: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 3 , } , op: * , left: ASTObject.var{ name: i , } , } , op: = , left: ASTObject.var{ name: n , } , } , step: ASTObject.op{ var: ASTObject.var{ name: i , } , op: x++ , } , init: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 0 , } , op: = , left: ASTObject.vardec{ varname: i , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , } , } , condition: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 10 , } , op: < , left: ASTObject.var{ name: i , } , } , }
ASTObject.whileloop{ body: ASTObject.op{ var: ASTObject.var{ name: i , } , op: x++ , } , condition: ASTObject.literal{ vtype: int , value: 1 , } , }
ASTObject.dowhileloop{ body: ASTObject.op{ var: ASTObject.var{ name: i , } , op: x++ , } , condition: ASTObject.literal{ vtype: int , value: 1 , } , }
ASTObject.repeatloop{ body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: I'm repeating myself! , } , ] , name: print , } , ASTObject.breakstatement{ } , ] , } , amount: ASTObject.op{ right: ASTObject.literal{ vtype: int , value: 10 , } , op: * , left: ASTObject.var{ name: n , } , } , withvar: ASTObject.vardec{ varname: i , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , } , }
ASTObject.switchstatement{ defaultcase: 4 , body: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.var{ name: b , } , op: + , left: ASTObject.var{ name: a , } , } , op: = , left: ASTObject.var{ name: c , } , } , ASTObject.breakstatement{ } , ASTObject.op{ right: ASTObject.op{ right: ASTObject.var{ name: b , } , op: * , left: ASTObject.var{ name: a , } , } , op: = , left: ASTObject.var{ name: c , } , } , ASTObject.breakstatement{ } , ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: ERROR , } , ] , name: print , } , ] , cases: [ ASTObject.case{ lineindex: 0 , testvalue: ASTObject.literal{ vtype: int , value: 1 , } , } , ASTObject.case{ lineindex: 2 , testvalue: ASTObject.literal{ vtype: int , value: 2 , } , } , ] , value: ASTObject.var{ name: x , } , }
ASTObject.op{ var: ASTObject.vardec{ varname: lel , vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: True , arraysize: 0 , } , } , op: addr , }
ASTObject.functiondec{ returntype: ASTObject.deftype{ isarray: False , typename: void , ispointer: False , arraysize: 0 , } , arguments: [ ASTObject.argdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: v , } , ] , name: function , }
ASTObject.functiondef{ returntype: ASTObject.deftype{ isarray: False , typename: void , ispointer: False , arraysize: 0 , } , body: ASTObject.codeblock{ code: [ ASTObject.functioncall{ arguments: [ ASTObject.literal{ vtype: string , value: I'm the definition! , } , ] , name: print , } , ] , } , arguments: [ ASTObject.argdef{ vtype: ASTObject.deftype{ isarray: False , typename: int , ispointer: False , arraysize: 0 , } , name: v , } , ] , name: functiom , }
