ASTObject.var{ pos: (1, 1) , name: str , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (2, 29) , value: 3 , } , pos: (2, 29) , op: - , left: ASTObject.var{ name: z , pos: (2, 25) , } , } , pos: (2, 23) , op: * , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (2, 17) , value: 3 , } , pos: (2, 17) , op: + , left: ASTObject.var{ name: y , pos: (2, 13) , } , } , } , pos: (2, 11) , op: = , left: ASTObject.var{ pos: (2, 1) , name: x , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (4, 13) , value: 0 , } , pos: (4, 13) , op: - , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (4, 9) , value: 0 , } , pos: (4, 9) , op: + , left: ASTObject.var{ name: x , pos: (4, 5) , } , } , } , pos: (4, 5) , op: = , left: ASTObject.var{ name: x , pos: (4, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (5, 9) , value: 0 , } , pos: (5, 9) , op: * , left: ASTObject.var{ name: x , pos: (5, 5) , } , } , pos: (5, 5) , op: = , left: ASTObject.var{ name: x , pos: (5, 1) , } , }
ASTObject.op{ right: ASTObject.var{ name: PI , pos: (6, 6) , } , pos: (6, 6) , op: = , left: ASTObject.var{ name: pi , pos: (6, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (7, 32) , value: 2 , } , pos: (7, 32) , op: << , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (7, 26) , value: 27 , } , pos: (7, 26) , op: - , left: ASTObject.literal{ cast: int , vtype: int , pos: (7, 22) , value: 9 , } , } , } , pos: (7, 20) , op: + , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (7, 16) , value: 2 , } , pos: (7, 16) , op: / , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (7, 12) , value: 2 , } , pos: (7, 12) , op: * , left: ASTObject.var{ name: pi , pos: (7, 7) , } , } , } , } , pos: (7, 7) , op: = , left: ASTObject.var{ name: tau , pos: (7, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (8, 12) , value: 2 , } , pos: (8, 12) , op: + , left: ASTObject.var{ name: tua , pos: (8, 6) , } , } , pos: (8, 6) , op: = , left: ASTObject.var{ name: pi , pos: (8, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (9, 24) , value: 1 , } , pos: (9, 24) , op: << , left: ASTObject.var{ name: pi , pos: (9, 20) , } , } , pos: (9, 20) , op: = , left: ASTObject.var{ name: pi , pos: (9, 15) , } , } , pos: (9, 13) , op: * , left: ASTObject.literal{ cast: int , vtype: int , pos: (9, 9) , value: 3 , } , } , pos: (9, 9) , op: + , left: ASTObject.literal{ cast: int , vtype: int , pos: (9, 5) , value: 2 , } , } , pos: (9, 5) , op: = , left: ASTObject.var{ name: n , pos: (9, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.var{ name: n , pos: (10, 11) , } , pos: (10, 11) , op: * , left: ASTObject.var{ name: p , pos: (10, 7) , } , } , pos: (10, 7) , op: = , left: ASTObject.var{ name: tua , pos: (10, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (11, 19) , value: 2 , } , pos: (11, 19) , op: - , left: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (11, 13) , value: 2 , } , pos: (11, 13) , op: + , left: ASTObject.var{ name: x , pos: (11, 9) , } , } , } , pos: (11, 7) , op: = , left: ASTObject.var{ name: tua , pos: (11, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (12, 13) , value: 8 , } , pos: (12, 13) , op: * , left: ASTObject.var{ name: tua , pos: (12, 7) , } , } , pos: (12, 7) , op: = , left: ASTObject.var{ name: tau , pos: (12, 1) , } , }
ASTObject.op{ right: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (13, 13) , value: 128 , } , pos: (13, 13) , op: / , left: ASTObject.var{ name: tua , pos: (13, 7) , } , } , pos: (13, 7) , op: = , left: ASTObject.var{ name: tua , pos: (13, 1) , } , }
ASTObject.var{ name: typdef , pos: (15, 1) , }
ASTObject.var{ name: str , pos: (15, 8) , }
ASTObject.op{ var: ASTObject.var{ name: char , pos: (15, 13) , } , pos: (15, 13) , op: addr , }
ASTObject.label{ pos: (17, 15) , name: gotohere , }
ASTObject.gotostatement{ pos: (18, 14) , value: gotohere , }
ASTObject.loopwhileloop{ body: ASTObject.codeblock{ code: [ ASTObject.op{ var: ASTObject.var{ name: x , pos: (21, 3) , } , pos: (21, 6) , op: x-- , } , ] , } , pos: (22, 7) , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (22, 11) , value: 10 , } , pos: (22, 11) , op: < , left: ASTObject.var{ name: x , pos: (22, 7) , } , } , }
ASTObject.structdef{ fields: {'age': <IceLeaf.ast.ASTObject object at 0x00000000021E9780>, 'name': <IceLeaf.ast.ASTObject object at 0x00000000021E9748>, 'id': <IceLeaf.ast.ASTObject object at 0x00000000021E97B8>} , name: user , }
ASTObject.ifstatement{ elsebody: ASTObject.ifstatement{ elsebody: ASTObject.codeblock{ code: [ ASTObject.functioncall{ owner: ASTObject.var{ name: print , pos: (35, 3) , } , arguments: [ ASTObject.literal{ cast: string , vtype: string , pos: (35, 10) , value: Dillermix! , } , ] , pos: (35, 10) , } , ] , } , pos: (33, 3) , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (32, 13) , value: 5 , } , pos: (32, 13) , op: > , left: ASTObject.var{ name: x , pos: (32, 9) , } , } , iftrue: ASTObject.codeblock{ code: [ ASTObject.op{ right: ASTObject.op{ right: ASTObject.var{ name: z , pos: (33, 11) , } , pos: (33, 11) , op: + , left: ASTObject.var{ name: x , pos: (33, 7) , } , } , pos: (33, 7) , op: = , left: ASTObject.var{ name: y , pos: (33, 3) , } , } , ] , } , } , pos: (30, 11) , condition: ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (30, 8) , value: 10 , } , pos: (30, 8) , op: < , left: ASTObject.var{ name: x , pos: (30, 4) , } , } , iftrue: ASTObject.codeblock{ code: [ ASTObject.op{ right: ASTObject.literal{ cast: int , vtype: int , pos: (31, 7) , value: 911 , } , pos: (31, 7) , op: = , left: ASTObject.var{ name: x , pos: (31, 3) , } , } , ] , } , }
ASTObject.funcdec{ body: ASTObject.codeblock{ code: [ ASTObject.returnstatement{ pos: (39, 14) , value: ASTObject.op{ right: ASTObject.var{ name: b , pos: (39, 13) , } , pos: (39, 13) , op: + , left: ASTObject.var{ name: a , pos: (39, 9) , } , } , } , ] , } , returntype: ASTObject.deftype{ isarray: False , typename: int , pos: (38, 37) , pointerdepth: 0 , arraysize: 0 , } , arguments: [ ASTObject.argdef{ vartype: ASTObject.deftype{ isarray: False , typename: int , pos: (38, 18) , pointerdepth: 0 , arraysize: 0 , } , name: a , } , ASTObject.argdef{ vartype: ASTObject.deftype{ isarray: False , typename: int , pos: (38, 28) , pointerdepth: 0 , arraysize: 0 , } , name: b , } , ] , name: myFunc , }
